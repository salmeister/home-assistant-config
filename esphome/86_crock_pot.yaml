substitutions:
  name: crock_pot
  display_name: "Crock-Pot"
  ipPrefix:  !secret ip_prefix
  id: "86"

<<: !include base.yaml

esphome:
  name: ${name}
  platform: ESP8266
  board: esp8285

time:
  - platform: homeassistant
    id: homeassistant_time
    
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO13
      inverted: True
    name: "${name}_button"
    internal: true
    on_press:
      - switch.toggle: relay
#      - light.toggle: blue_led
    
output:
  - platform: esp8266_pwm
    id: b_led
    pin:
      number: GPIO02
      inverted: True
  - platform: esp8266_pwm
    id: r_led
    pin:
      number: GPIO00
      inverted: True

light:
  - platform: monochromatic
    output: b_led
    id: blue_led
    restore_mode: ALWAYS_OFF
  - platform: monochromatic
    output: r_led
    id: red_led
    restore_mode: ALWAYS_OFF
    
switch:
- platform: gpio
  id: relay
  name: "${display_name}"
  pin: GPIO04
  restore_mode: ALWAYS_OFF
  on_turn_on:
    - light.turn_on: blue_led
  on_turn_off:
    - light.turn_off: blue_led
#- platform: gpio
#  name: "${name}_LED_Blue"
#  pin: GPIO02
#  inverted: True
#  restore_mode: ALWAYS_OFF
#- platform: gpio
#  name: "${name}_LED_Red"
#  pin: GPIO00
#  inverted: True
#  restore_mode: ALWAYS_OFF
sensor:
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: True
    cf_pin: GPIO05
    cf1_pin: GPIO14
    current:
      name: "${name}_amperage"
      unit_of_measurement: A
      icon: "mdi:flash-circle"
      accuracy_decimals: 3
      filters:
        # Map from sensor -> measured value
        - calibrate_linear:
            - 0.0 -> 0.02
            - 0.40557 -> 0.33
            - 0.48764 -> 0.39
            - 0.56972 -> 0.46
            - 0.64697 -> 0.53
            - 0.70497 -> 0.57
            - 1.05737 -> 1.02
            - 6.57285 -> 6.79
            - 9.41492 -> 7.77
            - 11.34618 -> 10.11
            - 12.56771 -> 10.24
        # Make everything below 0.02A appear as just 0A.
        # Furthermore it corrects for the power usage of the plug.
        - lambda: if (x < 0.02) return 0; else return (x - 0.02);
    voltage:
      name: "${name}_voltage"
      unit_of_measurement: V
      icon: "mdi:flash-circle"
      accuracy_decimals: 1
      filters:
        # Map from sensor -> measured value
        - calibrate_linear:
            - 0.0 -> 0.0
            - 300.34784 -> 116.5
            - 302.9358 -> 117.1
            - 305.52390 -> 118.2
            - 308.52054 -> 119.5
            - 314.42087 -> 122.2
            - 315.33118 -> 122.6
            - 317.23810 -> 122.7
            - 317.37436 -> 123.0
    power:
      name: "${name}_wattage"
      unit_of_measurement: W
      icon: "mdi:flash-circle"
      id: "${name}_wattage"
      accuracy_decimals: 0
      filters:
        # Map from sensor -> measured value
        - calibrate_linear:
            - 0.0 -> .9
            - 158.60205 -> 29.5
            - 186.18503 -> 34.3
            - 224.11159 -> 41.1
            - 234.45520 -> 41.2
            - 315.19495 -> 65.2
            - 527.52423 -> 91.1
            - 3344.43457 -> 567
            - 5095.95312 -> 878
            - 5882.06738 -> 1014
            - 6102.73145 -> 1048
            - 6695.76465 -> 1156
        # Make everything below 1W appear as just 0W.
        # Furthermore it corrects for the power usage of the plug.
        - lambda: if (x < (1 + .9)) return 0; else return (x - .9);
    change_mode_every: 8
    update_interval: 10s